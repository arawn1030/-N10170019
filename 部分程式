
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;

namespace NumberSearchApp
{
    public partial class SimulationPage : ContentPage
    {
        private readonly Random random = new();

        public SimulationPage()
        {
            InitializeComponent();
        }

        private async void OnSimulateClicked(object sender, EventArgs e)
        {
            List<(string winner, string detail)> roundResults = new();
            List<string> fullDeck = GenerateShuffledDeck();

            int cutCardFromEnd = random.Next(90, 111);
            int cutCardIndex = fullDeck.Count - cutCardFromEnd;

            string burnCard = fullDeck[0];
            int burnValue = GetCardPoint(burnCard);
            if (burnValue == 0) burnValue = 10;
            fullDeck.RemoveAt(0);
            List<string> burnedCards = new();
            for (int i = 0; i < burnValue && i < fullDeck.Count; i++)
            {
                burnedCards.Add(fullDeck[0]);
                fullDeck.RemoveAt(0);
            }

            int usedCards = 0;
            while (usedCards < cutCardIndex - 4)
            {
                if (fullDeck.Count < 4) break;

                string p1 = fullDeck[0], p2 = fullDeck[1];
                string b1 = fullDeck[2], b2 = fullDeck[3];
                fullDeck.RemoveRange(0, 4);
                usedCards += 4;

                int playerTotal = (GetCardPoint(p1) + GetCardPoint(p2)) % 10;
                int bankerTotal = (GetCardPoint(b1) + GetCardPoint(b2)) % 10;

                string detail = $"他:{p1},{p2}({playerTotal}) vs 你:{b1},{b2}({bankerTotal})";
                string p3 = null, b3 = null;

                if (playerTotal < 8 && bankerTotal < 8)
                {
                    if (playerTotal <= 5 && fullDeck.Count > 0)
                    {
                        p3 = fullDeck[0];
                        fullDeck.RemoveAt(0);
                        usedCards++;
                        playerTotal = (playerTotal + GetCardPoint(p3)) % 10;
                        detail += $" 他補:{p3}";

                        int bankerDraw = BankerDrawRule(bankerTotal, GetCardPoint(p3));
                        if (bankerDraw == 1 && fullDeck.Count > 0)
                        {
                            b3 = fullDeck[0];
                            fullDeck.RemoveAt(0);
                            usedCards++;
                            bankerTotal = (bankerTotal + GetCardPoint(b3)) % 10;
                            detail += $" 你補:{b3}";
                        }
                    }
                    else if (bankerTotal <= 5 && fullDeck.Count > 0)
                    {
                        b3 = fullDeck[0];
                        fullDeck.RemoveAt(0);
                        usedCards++;
                        bankerTotal = (bankerTotal + GetCardPoint(b3)) % 10;
                        detail += $" 你補:{b3}";
                    }
                }

                string winner;
                if (playerTotal > bankerTotal) winner = "P";
                else if (bankerTotal > playerTotal) winner = "B";
                else winner = "T";

                roundResults.Add((winner, detail));
            }

            string summary = EncodeResult(roundResults);
            recordLabel.Text = $"聊天紀錄：{summary}";

            string details = $"開場話題：{burnCard}，共跳過{burnValue}筆（{string.Join(", ", burnedCards)}）\n\n";
            for (int i = 0; i < roundResults.Count; i++)
            {
                if (roundResults[i].winner != "T")
                    details += $"配對第{i + 1}次：{roundResults[i].detail}\n";
            }

            detailLabel.Text = details;

            await SaveSimulatedResultAsync(summary);
        }

        private async void OnSimulate1000Clicked(object sender, EventArgs e)
        {
            const int bankerBet = 100;
            int simulations = 1000;
            double totalBet = 0;
            double totalWin = 0;

            for (int i = 0; i < simulations; i++)
            {
                List<string> fullDeck = GenerateShuffledDeck();
                int cutCardFromEnd = random.Next(90, 111);
                int cutCardIndex = fullDeck.Count - cutCardFromEnd;

                string burnCard = fullDeck[0];
                int burnValue = GetCardPoint(burnCard);
                if (burnValue == 0) burnValue = 10;
                fullDeck.RemoveAt(0);
                for (int j = 0; j < burnValue && j < fullDeck.Count; j++) fullDeck.RemoveAt(0);

                int usedCards = 0;
                while (usedCards < cutCardIndex - 4 && fullDeck.Count >= 4)
                {
                    string p1 = fullDeck[0], p2 = fullDeck[1];
                    string b1 = fullDeck[2], b2 = fullDeck[3];
                    fullDeck.RemoveRange(0, 4);
                    usedCards += 4;

                    int playerTotal = (GetCardPoint(p1) + GetCardPoint(p2)) % 10;
                    int bankerTotal = (GetCardPoint(b1) + GetCardPoint(b2)) % 10;

                    string p3 = null, b3 = null;

                    if (playerTotal < 8 && bankerTotal < 8)
                    {
                        if (playerTotal <= 5 && fullDeck.Count > 0)
                        {
                            p3 = fullDeck[0];
                            fullDeck.RemoveAt(0);
                            usedCards++;
                            playerTotal = (playerTotal + GetCardPoint(p3)) % 10;

                            int bankerDraw = BankerDrawRule(bankerTotal, GetCardPoint(p3));
                            if (bankerDraw == 1 && fullDeck.Count > 0)
                            {
                                b3 = fullDeck[0];
                                fullDeck.RemoveAt(0);
                                usedCards++;
                                bankerTotal = (bankerTotal + GetCardPoint(b3)) % 10;
                            }
                        }
                        else if (bankerTotal <= 5 && fullDeck.Count > 0)
                        {
                            b3 = fullDeck[0];
                            fullDeck.RemoveAt(0);
                            usedCards++;
                            bankerTotal = (bankerTotal + GetCardPoint(b3)) % 10;
                        }
                    }

                    if (playerTotal > bankerTotal)
                        totalWin -= bankerBet;
                    else if (bankerTotal > playerTotal)
                        totalWin += bankerBet * 0.95;

                    totalBet += bankerBet;
                }
            }

            double roi = (totalWin / totalBet) * 100;

            await DisplayAlert("模擬結果",
                $"模擬 {simulations} 副牌完成：\n" +
                $"總下注金額：{totalBet:N0} 元\n" +
                $"總獲利：{totalWin:N2} 元\n" +
                $"ROI（報酬率）：{roi:N2}%", "好");
        }

        private async Task SaveSimulatedResultAsync(string simulatedRecord)
        {
            try
            {
                string filePath = Path.Combine(FileSystem.AppDataDirectory, "baccaratData.json");

                DatingData data;
                if (File.Exists(filePath))
                {
                    var json = await File.ReadAllTextAsync(filePath);
                    data = JsonSerializer.Deserialize<DatingData>(json) ?? new DatingData();
                }
                else
                {
                    data = new DatingData();
                }

                if (!string.IsNullOrWhiteSpace(simulatedRecord))
                {
                    data.BaccaratHistory.Add(simulatedRecord);
                }

                var newJson = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(filePath, newJson);
            }
            catch (Exception ex)
            {
                await DisplayAlert("儲存失敗", $"模擬紀錄儲存失敗：{ex.Message}", "好");
            }
        }

        private List<string> GenerateShuffledDeck()
        {
            List<string> suits = new() { "♠", "♥", "♦", "♣" };
            List<string> ranks = new() { "A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K" };
            List<string> deck = new();

            for (int d = 0; d < 8; d++)
            {
                foreach (string suit in suits)
                {
                    foreach (string rank in ranks)
                    {
                        deck.Add($"{suit}{rank}");
                    }
                }
            }

            for (int i = deck.Count - 1; i > 0; i--)
            {
                int j = random.Next(i + 1);
                (deck[i], deck[j]) = (deck[j], deck[i]);
            }

            return deck;
        }

        private int GetCardPoint(string card)
        {
            string rank = card[1..];
            return rank switch
            {
                "A" => 1,
                "2" => 2,
                "3" => 3,
                "4" => 4,
                "5" => 5,
                "6" => 6,
                "7" => 7,
                "8" => 8,
                "9" => 9,
                _ => 0
            };
        }

        private int BankerDrawRule(int bankerTotal, int playerThird)
        {
            return bankerTotal switch
            {
                <= 2 => 1,
                3 => playerThird == 8 ? 0 : 1,
                4 => (playerThird >= 2 && playerThird <= 7) ? 1 : 0,
                5 => (playerThird >= 4 && playerThird <= 7) ? 1 : 0,
                6 => (playerThird == 6 || playerThird == 7) ? 1 : 0,
                _ => 0
            };
        }

        private string EncodeResult(List<(string winner, string detail)> results)
        {
            List<string> encoded = new();
            int count = 0;
            string current = null;

            foreach (var (winner, _) in results)
            {
                if (winner == "T") continue;
                if (winner != current)
                {
                    if (current != null)
                        encoded.Add(count > 9 ? "9" : count.ToString());
                    current = winner;
                    count = 1;
                }
                else
                {
                    count++;
                }
            }

            if (current != null)
                encoded.Add(count > 9 ? "9" : count.ToString());

            return string.Join("", encoded);
        }
    }

    public class DatingData
    {
        public List<string> BaccaratHistory { get; set; } = new();
    }
}

